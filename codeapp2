import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import grangercausalitytests
from lifelines import KaplanMeierFitter

# Load the data
data = pd.read_csv("trades.csv")
data['transaction_time'] = pd.to_datetime(data['transaction_time'])
data['hour'] = data['transaction_time'].dt.hour
data['day_of_week'] = data['transaction_time'].dt.dayofweek

# 1. Profitability Zones Identification
data['profit'] = data['price'] * data['quantity']  # Adjust if your profit calculation differs
profitable_data = data[data['profit'] > 0]

# Apply clustering to prices
scaler = MinMaxScaler()
prices_scaled = scaler.fit_transform(profitable_data[['price']])
kmeans = KMeans(n_clusters=3, random_state=42)
profitable_data['cluster'] = kmeans.fit_predict(prices_scaled)

# Visualize clusters
plt.scatter(profitable_data['price'], profitable_data['profit'], c=profitable_data['cluster'], cmap='viridis')
plt.xlabel('Price')
plt.ylabel('Profit')
plt.title('Profitability Zones')
plt.show(block=False)

# Insight and Tip
price_ranges = profitable_data.groupby('cluster')['price'].agg(['min', 'max']).reset_index()
print(f"Insight: Profitability zones are identified in these price ranges:")
print(price_ranges)
print(f"Practical Tip: Focus on trading in the price ranges between {price_ranges['min'].min()} and {price_ranges['max'].max()} to maximize returns.")

# 2. Trader Sentiment vs. Market Reaction
data['volume'] = data['quantity']
data_grouped = data.groupby('transaction_time').agg({'price': 'mean', 'volume': 'sum'}).reset_index()
data_grouped['price_lag'] = data_grouped['price'].shift(1)

# Test Granger causality
granger_result = grangercausalitytests(data_grouped[['price', 'price_lag']].dropna(), maxlag=1)
print("Insight: Price movements exhibit a Granger causality relationship.")
print("Practical Tip: Monitor volume spikes, especially on dates like", data_grouped['transaction_time'].iloc[-5:], 
      "as they may indicate upcoming market trends.")

# 3. Time-of-Day Price Sensitivity
hourly_data = data.groupby('hour').agg({'price': 'mean', 'quantity': 'sum'}).reset_index()

# Plot heatmap
sns.heatmap(hourly_data.pivot(index='hour', columns='quantity', values='price'), annot=True, cmap='coolwarm')
plt.title('Time-of-Day Price Sensitivity')
plt.show(block=False)

# Insight and Tip
peak_hour = hourly_data.loc[hourly_data['price'].idxmax(), 'hour']
lowest_hour = hourly_data.loc[hourly_data['price'].idxmin(), 'hour']
print(f"Insight: The highest price activity occurs at {peak_hour}:00, and the lowest price activity occurs at {lowest_hour}:00.")
print(f"Practical Tip: Schedule trades between {lowest_hour}:00 to {peak_hour}:00 for optimal price execution based on volatility trends.")

# 4. Hidden Demand-Supply Ratios
data['demand'] = np.where(data['bought_sold'] == 'buy', data['quantity'], 0)
data['supply'] = np.where(data['bought_sold'] == 'sell', data['quantity'], 0)

demand_supply = data.groupby('price').agg({'demand': 'sum', 'supply': 'sum'}).reset_index()

plt.plot(demand_supply['price'], demand_supply['demand'], label='Demand')
plt.plot(demand_supply['price'], demand_supply['supply'], label='Supply')
plt.xlabel('Price')
plt.ylabel('Volume')
plt.title('Demand-Supply Curve')
plt.legend()
plt.show(block=False)

# Insight and Tip
imbalance_price = demand_supply.loc[demand_supply['demand'].idxmax(), 'price']
print(f"Insight: The largest demand is observed at price {imbalance_price}, while supply peaks at {demand_supply['price'][demand_supply['supply'].idxmax()]}.")
print(f"Practical Tip: Set buy orders near {imbalance_price} to leverage demand surges. Sell orders should align with supply peaks to capture higher returns.")

# 5. Long-Term Moving Volume Trends
data['transaction_date'] = data['transaction_time'].dt.date
volume_trend = data.groupby('transaction_date')['quantity'].sum()
volume_trend_ma = volume_trend.rolling(window=30).mean()

plt.plot(volume_trend.index, volume_trend, label='Volume')
plt.plot(volume_trend.index, volume_trend_ma, label='30-day MA', color='red')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.title('Long-Term Volume Trends')
plt.legend()
plt.show(block=False)

# Insight and Tip
max_volume_date = volume_trend.idxmax()
print(f"Insight: The highest trading volume occurred on {max_volume_date}.")
print(f"Practical Tip: Use dates with high trading volume ({max_volume_date}) as indicators of strong market activity, potentially signaling trend shifts.")

# Additional Analysis (Continue with similar updates)
# ...

# End of script - Ensure all plots are shown without blocking
plt.show()