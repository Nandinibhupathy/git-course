import java.io.*;
import java.sql.*;
import java.util.*;

public class FileManager {

    // Database credentials
    private static final String URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the word to search: ");
        String searchWord = scanner.nextLine(); // User input for search word
        
        List<FileResult> results = searchFilesForWord(searchWord);
        
        // Check if any files were found
        if (results.isEmpty()) {
            System.out.println("No files found containing the word: " + searchWord);
            return;
        }

        // Display search results
        System.out.println("Files containing the word '" + searchWord + "':");
        for (int i = 0; i < results.size(); i++) {
            System.out.println((i + 1) + ". File: " + results.get(i).fileName + ", Count: " + results.get(i).count);
        }

        System.out.print("Enter the file numbers to mask (comma-separated, e.g., 1,2): ");
        String input = scanner.nextLine(); // User input for selected files
        List<Integer> selectedIndices = parseInputToIndices(input, results.size());

        System.out.print("Enter the word to be masked: ");
        String maskedWord = scanner.nextLine(); // User input for masked word

        // Mask the word in selected files
        for (int index : selectedIndices) {
            String fileName = results.get(index).fileName;
            maskWordInFile(fileName, searchWord, maskedWord);
        }
        
        System.out.println("Masking completed.");
        scanner.close();
    }

    // Search for a word in all files
    public static List<FileResult> searchFilesForWord(String searchWord) {
        List<FileResult> results = new ArrayList<>();

        String sql = "SELECT fileName, filePath, fileContent FROM files";
        
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
             
            while (rs.next()) {
                String fileName = rs.getString("fileName");
                String filePath = rs.getString("filePath");
                Blob blob = rs.getBlob("fileContent");
                int count = countWordInBlob(blob, searchWord);

                if (count > 0) {
                    results.add(new FileResult(fileName, count, filePath));
                }
            }
        } catch (SQLException | IOException e) {
            System.err.println("Error: " + e.getMessage());
        }

        return results;
    }

    // Count occurrences of a word in a Blob
    private static int countWordInBlob(Blob blob, String word) throws IOException, SQLException {
        int count = 0;
        try (InputStream inputStream = blob.getBinaryStream();
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
             
            String line;
            while ((line = reader.readLine()) != null) {
                String[] words = line.split("\\W+"); // Split by non-word characters
                for (String w : words) {
                    if (w.equalsIgnoreCase(word)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    // Mask a word in selected files
    public static void maskWordInFile(String fileName, String searchWord, String maskedWord) {
        String sql = "SELECT filePath, fileContent FROM files WHERE fileName = ?";
        
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, fileName);
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                String filePath = rs.getString("filePath");
                Blob blob = rs.getBlob("fileContent");

                // Read file content into a String
                String fileContent = readBlobToString(blob);
                
                // Replace the search word with the masked word
                String updatedContent = fileContent.replace(searchWord, maskedWord);
                
                // Update the database with the new content
                updateFileContentInDatabase(fileName, updatedContent);
                
                // Write the updated content back to the file on disk
                writeToFile(filePath, updatedContent);
                
                System.out.println("Masked word in file: " + fileName);
            }
        } catch (SQLException | IOException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    // Read Blob content to String
    private static String readBlobToString(Blob blob) throws IOException, SQLException {
        StringBuilder sb = new StringBuilder();
        try (InputStream inputStream = blob.getBinaryStream();
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
             
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line).append(System.lineSeparator());
            }
        }
        return sb.toString();
    }

    // Update file content in the database
    private static void updateFileContentInDatabase(String fileName, String newContent) {
        String sql = "UPDATE files SET fileContent = ? WHERE fileName = ?";
        
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setBlob(1, new ByteArrayInputStream(newContent.getBytes()));
            pstmt.setString(2, fileName);
            pstmt.executeUpdate();
            System.out.println("Updated file content in database for: " + fileName);
        } catch (SQLException e) {
            System.err.println("Error updating database: " + e.getMessage());
        }
    }

    // Write content to file on disk
    private static void writeToFile(String filePath, String content) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(content);
        }
    }

    // Helper method to parse user input into file indices
    private static List<Integer> parseInputToIndices(String input, int maxIndex) {
        List<Integer> indices = new ArrayList<>();
        String[] parts = input.split(",");
        for (String part : parts) {
            try {
                int index = Integer.parseInt(part.trim()) - 1; // Convert to zero-based index
                if (index >= 0 && index < maxIndex) {
                    indices.add(index);
                } else {
                    System.out.println("Invalid index: " + (index + 1));
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input: " + part);
            }
        }
        return indices;
    }

    // Helper class to store file results
    static class FileResult {
        String fileName;
        int count;
        String filePath;

        public FileResult(String fileName, int count, String filePath) {
            this.fileName = fileName;
            this.count = count;
            this.filePath = filePath;
        }
    }
}










import java.io.*;
import java.sql.*;
import java.util.*;

public class FileManager {

    // Database credentials
    private static final String URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    public static void main(String[] args) {
        String searchWord = "example"; // Replace with user input
        List<FileResult> results = searchFilesForWord(searchWord);
        
        // Print search results
        for (FileResult result : results) {
            System.out.println("File: " + result.fileName + ", Count: " + result.count);
        }

        // Assume user selects files (for demonstration, we are masking the first file)
        if (!results.isEmpty()) {
            String maskedWord = "****"; // Replace with user input
            List<String> selectedFiles = Arrays.asList(results.get(0).fileName); // User-selected files
            for (String fileName : selectedFiles) {
                maskWordInFile(fileName, searchWord, maskedWord);
            }
        }
    }

    // Search for a word in all files
    public static List<FileResult> searchFilesForWord(String searchWord) {
        List<FileResult> results = new ArrayList<>();

        String sql = "SELECT fileName, filePath, fileContent FROM files";
        
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
             
            while (rs.next()) {
                String fileName = rs.getString("fileName");
                String filePath = rs.getString("filePath");
                Blob blob = rs.getBlob("fileContent");
                int count = countWordInBlob(blob, searchWord);

                if (count > 0) {
                    results.add(new FileResult(fileName, count, filePath));
                }
            }
        } catch (SQLException | IOException e) {
            System.err.println("Error: " + e.getMessage());
        }

        return results;
    }

    // Count occurrences of a word in a Blob
    private static int countWordInBlob(Blob blob, String word) throws IOException, SQLException {
        int count = 0;
        try (InputStream inputStream = blob.getBinaryStream();
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
             
            String line;
            while ((line = reader.readLine()) != null) {
                String[] words = line.split("\\W+"); // Split by non-word characters
                for (String w : words) {
                    if (w.equalsIgnoreCase(word)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    // Mask a word in selected files
    public static void maskWordInFile(String fileName, String searchWord, String maskedWord) {
        String sql = "SELECT filePath, fileContent FROM files WHERE fileName = ?";
        
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, fileName);
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                String filePath = rs.getString("filePath");
                Blob blob = rs.getBlob("fileContent");

                // Read file content into a String
                String fileContent = readBlobToString(blob);
                
                // Replace the search word with the masked word
                String updatedContent = fileContent.replace(searchWord, maskedWord);
                
                // Update the database with the new content
                updateFileContentInDatabase(fileName, updatedContent);
                
                // Write the updated content back to the file on disk
                writeToFile(filePath, updatedContent);
                
                System.out.println("Masked word in file: " + fileName);
            }
        } catch (SQLException | IOException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    // Read Blob content to String
    private static String readBlobToString(Blob blob) throws IOException, SQLException {
        StringBuilder sb = new StringBuilder();
        try (InputStream inputStream = blob.getBinaryStream();
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
             
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line).append(System.lineSeparator());
            }
        }
        return sb.toString();
    }

    // Update file content in the database
    private static void updateFileContentInDatabase(String fileName, String newContent) {
        String sql = "UPDATE files SET fileContent = ? WHERE fileName = ?";
        
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setBlob(1, new ByteArrayInputStream(newContent.getBytes()));
            pstmt.setString(2, fileName);
            pstmt.executeUpdate();
            System.out.println("Updated file content in database for: " + fileName);
        } catch (SQLException e) {
            System.err.println("Error updating database: " + e.getMessage());
        }
    }

    // Write content to file on disk
    private static void writeToFile(String filePath, String content) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(content);
        }
    }

    // Helper class to store file results
    static class FileResult {
        String fileName;
        int count;
        String filePath;

        public FileResult(String fileName, int count, String filePath) {
            this.fileName = fileName;
            this.count = count;
            this.filePath = filePath;
        }
    }
}










import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.*;
import java.util.*;

public class FileManager {

    // Database credentials
    private static final String URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    public static void main(String[] args) {
        // Example search and masking operations
        String searchWord = "example"; // User input for searching
        List<FileRecord> foundFiles = searchFiles(searchWord);
        foundFiles.forEach(fileRecord -> {
            System.out.println("File: " + fileRecord.fileName + ", Count: " + fileRecord.count);
        });

        // Example of masking
        List<String> selectedFiles = Arrays.asList("file1.txt", "file2.txt"); // User input for selected files
        String maskedWord = "masked"; // User input for masking
        maskWordInFiles(selectedFiles, searchWord, maskedWord);
    }

    // Search for files containing the specified word
    public static List<FileRecord> searchFiles(String searchWord) {
        List<FileRecord> foundFiles = new ArrayList<>();

        String sql = "SELECT fileName, filePath, fileContent FROM files";
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                String fileName = rs.getString("fileName");
                String filePath = rs.getString("filePath");
                byte[] fileContentBytes = rs.getBytes("fileContent");
                String fileContent = new String(fileContentBytes);

                // Count occurrences of the search word
                int count = countOccurrences(fileContent, searchWord);
                if (count > 0) {
                    foundFiles.add(new FileRecord(fileName, filePath, count));
                }
            }
        } catch (SQLException e) {
            System.err.println("SQL Exception: " + e.getMessage());
        }
        return foundFiles;
    }

    // Count occurrences of a word in a given text
    public static int countOccurrences(String text, String word) {
        String[] words = text.split("\\W+");
        return (int) Arrays.stream(words).filter(w -> w.equalsIgnoreCase(word)).count();
    }

    // Mask a word in selected files and update in both database and local disk
    public static void maskWordInFiles(List<String> selectedFileNames, String searchWord, String maskedWord) {
        String sql = "SELECT fileName, filePath, fileContent FROM files WHERE fileName IN (?)";
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = connection.prepareStatement(sql)) {

            // Create a comma-separated string of file names
            String fileNames = String.join(",", selectedFileNames);
            pstmt.setString(1, fileNames);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    String fileName = rs.getString("fileName");
                    String filePath = rs.getString("filePath");
                    byte[] fileContentBytes = rs.getBytes("fileContent");
                    String fileContent = new String(fileContentBytes);

                    // Replace searchWord with maskedWord
                    String updatedContent = fileContent.replaceAll("(?i)" + searchWord, maskedWord);

                    // Update database
                    updateDatabase(connection, fileName, updatedContent);

                    // Update local file
                    updateLocalFile(filePath, updatedContent);
                }
            }
        } catch (SQLException e) {
            System.err.println("SQL Exception: " + e.getMessage());
        }
    }

    // Update the database with the new file content
    private static void updateDatabase(Connection connection, String fileName, String updatedContent) {
        String sql = "UPDATE files SET fileContent = ? WHERE fileName = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setBlob(1, new SerialBlob(updatedContent.getBytes()));
            pstmt.setString(2, fileName);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println("SQL Update Exception: " + e.getMessage());
        }
    }

    // Update the local file with the new content
    private static void updateLocalFile(String filePath, String updatedContent) {
        try (FileOutputStream fos = new FileOutputStream(new File(filePath))) {
            fos.write(updatedContent.getBytes());
        } catch (IOException e) {
            System.err.println("IO Exception: " + e.getMessage());
        }
    }

    // Helper class to hold file information
    static class FileRecord {
        String fileName;
        String filePath;
        int count;

        FileRecord(String fileName, String filePath, int count) {
            this.fileName = fileName;
            this.filePath = filePath;
            this.count = count;
        }
    }
}