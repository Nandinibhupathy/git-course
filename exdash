import re

# Define individual functions for each query type
def handle_exceptions_for_trade(trade_id):
    return f"Handling exceptions for trade ID: {trade_id}"

def handle_replay_trade(trade_id):
    return f"Replaying trade with ID: {trade_id}"

def handle_escalation(exception_type):
    return f"Escalating issue for exception type: {exception_type}"

def handle_training_materials(exception_type):
    return f"Providing training materials for exception type: {exception_type}"

def handle_unresolved_exceptions():
    return "Generating summary of unresolved exceptions."

def handle_exceptions_on_date(date_or_range):
    if isinstance(date_or_range, tuple):
        start_date, end_date = date_or_range
        return f"Generating summary of exceptions that occurred from {start_date} to {end_date}"
    return f"Generating summary of exceptions that occurred on {date_or_range}"

# Main query processor
def process_query(query):
    patterns = [
        (r'(?i)\bexceptions\b.*\btrade\s?id\s?(\d+)', 
         handle_exceptions_for_trade, 
         'trade_id'),
        
        (r'(?i)\breplay\b.*?\btrade\b.*?(?:id\s?)?(\d+)', 
         handle_replay_trade, 
         'trade_id'),
        
        (r'(?i)\bwhom\b.*\bescalate\b.*\bexception\b.*\btype\b\s?(\w+)', 
         handle_escalation, 
         'exception_type'),
        
        (r'(?i)\bshow\b.*\btraining\s?materials\b.*\bexception\b\s?type\s?(\w+)', 
         handle_training_materials, 
         'exception_type'),
        
        (r'(?i)\bsummary\b.*\bunresolved\b.*\bexceptions\b', 
         handle_unresolved_exceptions, 
         None),
        
        (r'(?i)\bsummary\b.*\bexceptions\b.*\boccurred\b.*\bon\b\s*(\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4})(?:\s*to\s*(\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4}))?', 
         handle_exceptions_on_date, 
         'date_or_range')
    ]
    
    for pattern, handler_function, value_key in patterns:
        match = re.search(pattern, query)
        if match:
            if match.lastindex:  # Extract specific values if available
                if match.lastindex == 2:  # Date range
                    start_date, end_date = match.group(1), match.group(2)
                    return handler_function((start_date, end_date))
                extracted_value = match.group(1)  # Single value
                return handler_function(extracted_value)
            else:
                return handler_function()  # Call the function without extracted value
    return "Sorry, I couldn't process your query."

# Example queries
queries = [
    "What are the exceptions for trade id 12345?",
    "Replay a trade with id 98765",
    "Whom should I escalate to for the exception type XYZ",
    "Show me training materials for handling exception type ABC",
    "Give me summary of unresolved exceptions",
    "Give me summary of exceptions that occurred on 2024-12-18",
    "Give me summary of exceptions that occurred on 2024-12-18 to 2024-12-20"
]

for query in queries:
    print(f"Query: {query}")
    print(f"Response: {process_query(query)}\n")










import re

# Define individual functions for each query type
def handle_exceptions_for_trade(trade_id):
    return f"Handling exceptions for trade ID: {trade_id}"

def handle_replay_trade(trade_id):
    return f"Replaying trade with ID: {trade_id}"

def handle_escalation(exception_type):
    return f"Escalating issue for exception type: {exception_type}"

def handle_training_materials(exception_type):
    return f"Providing training materials for exception type: {exception_type}"

def handle_unresolved_exceptions():
    return "Generating summary of unresolved exceptions."

def handle_exceptions_on_date(date):
    return f"Generating summary of exceptions that occurred on {date}"

# Main query processor
def process_query(query):
    patterns = [
        # (Pattern, Function, Description of Extracted Value)
        (r'(?i)\bexceptions\b.*\btrade\s?id\s?(\d+)', 
         handle_exceptions_for_trade, 
         'trade_id'),
        
        (r'(?i)\breplay\b.*\btrade\s?id\s?(\d+)', 
         handle_replay_trade, 
         'trade_id'),
        
        (r'(?i)\bescalate\b.*\bexception\b.*\bto\b\s*(\w+)', 
         handle_escalation, 
         'exception_type'),
        
        (r'(?i)\bshow\b.*\btraining\s?materials\b.*\bexception\b\s*(\w+)', 
         handle_training_materials, 
         'exception_type'),
        
        (r'(?i)\bsummary\b.*\bunresolved\b.*\bexceptions\b', 
         handle_unresolved_exceptions, 
         None),
        
        (r'(?i)\bsummary\b.*\bexceptions\b.*\boccurred\b.*\bon\b\s*(\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4})', 
         handle_exceptions_on_date, 
         'date')
    ]
    
    for pattern, handler_function, value_key in patterns:
        match = re.search(pattern, query)
        if match:
            if match.lastindex:  # Extract specific value if available
                extracted_value = match.group(1)  # Extract the first capturing group
                return handler_function(extracted_value)  # Call the corresponding function with the extracted value
            else:
                return handler_function()  # Call the function without extracted value
    return "Sorry, I couldn't process your query."

# Example queries
queries = [
    "What are the exceptions for trade id 12345?",
    "Replay a trade with id 98765",
    "Whom should I escalate to for the exception type XYZ",
    "Show me training materials for handling exception type ABC",
    "Give me summary of unresolved exceptions",
    "Give me summary of exceptions that occurred on 2024-12-18"
]

for query in queries:
    print(f"Query: {query}")
    print(f"Response: {process_query(query)}\n")







import re

# Define individual functions for each query type
def handle_exceptions_for_trade(trade_id):
    return f"Handling exceptions for trade ID: {trade_id}"

def handle_replay_trade(trade_id):
    return f"Replaying trade with ID: {trade_id}"

def handle_escalation(exception_type):
    return f"Escalating issue for exception type: {exception_type}"

def handle_training_materials(exception_type):
    return f"Providing training materials for exception type: {exception_type}"

def handle_unresolved_exceptions():
    return "Generating summary of unresolved exceptions."

def handle_exceptions_on_date(date):
    return f"Generating summary of exceptions that occurred on {date}"

# Main query processor
def process_query(query):
    patterns = [
        # (Pattern, Function, Extracted Value Key)
        (r'(?i)\b(exceptions)\b.*\b(trade\s?id)\b\s*(\d+)', 
         handle_exceptions_for_trade, 
         'trade_id'),
        
        (r'(?i)\breplay\b.*\b(trade\s?id)\b\s*(\d+)', 
         handle_replay_trade, 
         'trade_id'),
        
        (r'(?i)\bescalate\b.*\b(exception)\b.*\b(to)\b\s*(\w+)', 
         handle_escalation, 
         'exception_type'),
        
        (r'(?i)\bshow\b.*\b(training\s?materials)\b.*\b(exception)\b\s*(\w+)', 
         handle_training_materials, 
         'exception_type'),
        
        (r'(?i)\bsummary\b.*\bunresolved\b.*\b(exception)\b', 
         handle_unresolved_exceptions, 
         None),
        
        (r'(?i)\bsummary\b.*\b(exception)\b.*\b(occurred)\b.*\b(on)\b\s*(\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4})', 
         handle_exceptions_on_date, 
         'date')
    ]
    
    for pattern, handler_function, value_key in patterns:
        match = re.search(pattern, query)
        if match:
            if match.lastindex:  # Extract specific value if available
                extracted_value = match.group(match.lastindex)
                return handler_function(extracted_value)  # Call the corresponding function with the extracted value
            else:
                return handler_function()  # Call the function without extracted value
    return "Sorry, I couldn't process your query."

# Example queries
queries = [
    "What are the exceptions for trade id 12345?",
    "Replay a trade with id 98765",
    "Whom should I escalate to for the exception type XYZ",
    "Show me training materials for handling exception type ABC",
    "Give me summary of unresolved exceptions",
    "Give me summary of exceptions that occurred on 2024-12-18"
]

for query in queries:
    print(f"Query: {query}")
    print(f"Response: {process_query(query)}\n")














import re

def process_query(query):
    patterns = [
        # (Pattern, Response, Description of Extracted Value)
        (r'(?i)\b(exceptions)\b.*\b(trade\s?id)\b\s*(\d+)', 
         'Exceptions for trade ID: {0}', 
         'trade_id'),
        
        (r'(?i)\breplay\b.*\b(trade\s?id)\b\s*(\d+)', 
         'Replay trade with ID: {0}', 
         'trade_id'),
        
        (r'(?i)\bescalate\b.*\b(exception)\b.*\b(to)\b\s*(\w+)', 
         'Escalate to: {0} for exception', 
         'escalation_contact'),
        
        (r'(?i)\bshow\b.*\b(training\s?materials)\b.*\b(exception)\b\s*(\w+)', 
         'Show training materials for exception: {0}', 
         'exception_type'),
        
        (r'(?i)\bsummary\b.*\bunresolved\b.*\b(exception)\b', 
         'Summary of unresolved exceptions', 
         None),
        
        (r'(?i)\bsummary\b.*\b(exception)\b.*\b(occurred)\b.*\b(on)\b\s*(\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4})', 
         'Summary of exceptions on {0}', 
         'date')
    ]
    
    for pattern, response, value_key in patterns:
        match = re.search(pattern, query)
        if match:
            # Extract specific values if capturing groups exist
            extracted_value = match.group(match.lastindex) if match.lastindex else None
            return {
                'response': response.format(extracted_value) if extracted_value else response,
                'extracted_value': {value_key: extracted_value} if value_key else None
            }
    return {
        'response': "Sorry, I couldn't process your query.",
        'extracted_value': None
    }

# Example queries
queries = [
    "What are the exceptions for trade id 12345?",
    "Replay a trade with id 98765",
    "Whom should I escalate to for the exception type XYZ",
    "Show me training materials for handling exception type ABC",
    "Give me summary of unresolved exceptions",
    "Give me summary of exceptions that occurred on 2024-12-18"
]

for query in queries:
    result = process_query(query)
    print(f"Query: {query}")
    print(f"Response: {result['response']}")
    print(f"Extracted Value: {result['extracted_value']}\n")






from datetime import datetime, timedelta
import re

def process_date_input(input_string):
    today = datetime.today()
    input_string = input_string.lower().strip()

    # Check for direct date input
    date_pattern = r"^\d{4}-\d{2}-\d{2}$"  # Matches 'YYYY-MM-DD'
    date_range_pattern = r"^\d{4}-\d{2}-\d{2}\s*to\s*\d{4}-\d{2}-\d{2}$"  # Matches 'YYYY-MM-DD to YYYY-MM-DD'

    if re.match(date_pattern, input_string):
        # Single date
        return f"Date: {input_string}"
    elif re.match(date_range_pattern, input_string):
        # Date range
        start_date, end_date = map(str.strip, input_string.split("to"))
        return f"Start Date: {start_date}, End Date: {end_date}"

    # Handle predefined strings
    if input_string == "today":
        return today.strftime('%Y-%m-%d')
    elif input_string == "yesterday":
        return (today - timedelta(days=1)).strftime('%Y-%m-%d')
    elif input_string == "day before yesterday":
        return (today - timedelta(days=2)).strftime('%Y-%m-%d')
    elif input_string == "this week":
        start_of_week = today - timedelta(days=today.weekday() + 1) if today.weekday() != 6 else today
        end_of_week = start_of_week + timedelta(days=6)
        return f"Start: {start_of_week.strftime('%Y-%m-%d')}, End: {end_of_week.strftime('%Y-%m-%d')}"
    elif input_string == "last week":
        start_of_week = today - timedelta(days=today.weekday() + 1) if today.weekday() != 6 else today
        last_week_start = start_of_week - timedelta(days=7)
        last_week_end = last_week_start + timedelta(days=6)
        return f"Start: {last_week_start.strftime('%Y-%m-%d')}, End: {last_week_end.strftime('%Y-%m-%d')}"
    elif "days before" in input_string:
        try:
            days = int(input_string.split()[0])
            return (today - timedelta(days=days)).strftime('%Y-%m-%d')
        except ValueError:
            return "Invalid input"
    else:
        return "Invalid input"

# Examples
print(process_date_input("2024-12-18"))  # Direct date input
print(process_date_input("2024-12-15 to 2024-12-18"))  # Direct date range
print(process_date_input("today"))  # Predefined string
print(process_date_input("2 days before"))  # Predefined string
print(process_date_input("last week"))  # Predefined string







import pandas as pd

# Load the CSV file
file_path = 'your_file.csv'  # Replace with your file path
df = pd.read_csv(file_path)

# Convert 'errorOccuredTimestamp' to datetime for easier filtering
df['errorOccuredTimestamp'] = pd.to_datetime(df['errorOccuredTimestamp'])

def count_error_codes(df, start_date, end_date=None):
    """
    Filters the DataFrame based on the date or date range and counts occurrences of errorCode.

    Args:
        df (pd.DataFrame): The input DataFrame.
        start_date (str): The start date (format: yyyy-mm-dd).
        end_date (str, optional): The end date (format: yyyy-mm-dd). If None, use only start_date.

    Returns:
        dict: A dictionary with errorCode as keys and their counts as values.
    """
    if end_date:
        # Filter for date range
        mask = (df['errorOccuredTimestamp'] >= pd.to_datetime(start_date)) & (df['errorOccuredTimestamp'] <= pd.to_datetime(end_date))
    else:
        # Filter for single date
        mask = df['errorOccuredTimestamp'].dt.date == pd.to_datetime(start_date).date()
    
    filtered_df = df[mask]
    
    # Count occurrences of each unique errorCode and return as a dictionary
    return filtered_df['errorCode'].value_counts().to_dict()

# Example usage:
# For a single date
single_date_counts = count_error_codes(df, '2024-12-17')

# For a date range
date_range_counts = count_error_codes(df, '2024-12-15', '2024-12-17')

print("Single Date Counts:")
print(single_date_counts)

print("\nDate Range Counts:")
print(date_range_counts)










import pandas as pd

# Load the CSV file
file_path = 'your_file.csv'  # Replace with your file path
df = pd.read_csv(file_path)

# Convert 'errorOccurredTimestamp' to datetime for easier filtering
df['errorOccurredTimestamp'] = pd.to_datetime(df['errorOccurredTimestamp'])

def count_error_codes(df, start_date, end_date=None):
    """
    Filters the DataFrame based on the date or date range and counts occurrences of errorCode.

    Args:
        df (pd.DataFrame): The input DataFrame.
        start_date (str): The start date (format: yyyy-mm-dd).
        end_date (str, optional): The end date (format: yyyy-mm-dd). If None, use only start_date.

    Returns:
        dict: A dictionary with errorCode as keys and their counts as values.
    """
    # Convert start_date and end_date to datetime.date objects
    start_date = pd.to_datetime(start_date).date()
    end_date = pd.to_datetime(end_date).date() if end_date else None
    
    if end_date:
        # Filter for date range (extract date part from 'errorOccurredTimestamp')
        mask = (df['errorOccurredTimestamp'].dt.date >= start_date) & (df['errorOccurredTimestamp'].dt.date <= end_date)
    else:
        # Filter for single date
        mask = df['errorOccurredTimestamp'].dt.date == start_date
    
    filtered_df = df[mask]
    
    # Count occurrences of each unique errorCode and return as a dictionary
    return filtered_df['errorCode'].value_counts().to_dict()

# Example usage:
# For a single date
single_date_counts = count_error_codes(df, '2024-12-17')

# For a date range
date_range_counts = count_error_codes(df, '2024-12-15', '2024-12-17')

print("Single Date Counts:")
print(single_date_counts)

print("\nDate Range Counts:")
print(date_range_counts)