<!DOCTYPE html>
<html>
<head>
    <title>Java HTTP Server Example</title>
</head>
<body>
    <h1>Send Data to Java Server</h1>
    <form id="dataForm">
        <input type="text" id="dataInput" placeholder="Enter some data" />
        <button type="submit">Send</button>
    </form>

    <p id="response"></p>

    <script>
        document.getElementById("dataForm").addEventListener("submit", function (event) {
            event.preventDefault();
            const data = document.getElementById("dataInput").value;

            fetch('http://localhost:8000/data', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: data })
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("response").innerText = "Server response: " + data.status;
            })
            .catch(error => {
                console.error("Error:", error);
            });
        });
    </script>
</body>
</html>














import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

import java.io.OutputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;

public class SimpleHttpServer {

    public static void main(String[] args) throws Exception {
        // Create the server, listening on port 8000
        HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);

        // Create a context for the /data endpoint
        server.createContext("/data", new DataHandler());

        // Set the default executor
        server.setExecutor(null);
        server.start();
        System.out.println("Server started on port 8000");
    }

    static class DataHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // Add CORS headers
            exchange.getResponseHeaders().set("Access-Control-Allow-Origin", "*");
            exchange.getResponseHeaders().set("Access-Control-Allow-Methods", "POST, OPTIONS");
            exchange.getResponseHeaders().set("Access-Control-Allow-Headers", "Content-Type");

            if ("OPTIONS".equals(exchange.getRequestMethod())) {
                // Handle preflight requests
                exchange.sendResponseHeaders(200, -1);
                return;
            }

            if ("POST".equals(exchange.getRequestMethod())) {
                // Read request body
                BufferedReader reader = new BufferedReader(new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8));
                StringBuilder requestBody = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    requestBody.append(line);
                }

                // Manually parse the incoming JSON-like string
                String message = parseMessageFromJson(requestBody.toString());

                System.out.println("Received: " + message);

                // Manually create a JSON response
                String jsonResponse = "{\"status\":\"Received: " + message + "\"}";

                // Send the response back to the client
                byte[] responseBytes = jsonResponse.getBytes(StandardCharsets.UTF_8);
                exchange.getResponseHeaders().set("Content-Type", "application/json");
                exchange.sendResponseHeaders(200, responseBytes.length);

                OutputStream outputStream = exchange.getResponseBody();
                outputStream.write(responseBytes);
                outputStream.flush();
                outputStream.close();
            } else {
                // Respond with 405 if method is not POST
                exchange.sendResponseHeaders(405, -1);
            }
        }

        // Simple function to extract the value of "message" from the JSON-like string
        private String parseMessageFromJson(String json) {
            String prefix = "\"message\":\"";
            int startIndex = json.indexOf(prefix) + prefix.length();
            int endIndex = json.indexOf("\"", startIndex);

            if (startIndex > prefix.length() && endIndex > startIndex) {
                return json.substring(startIndex, endIndex);
            }

            return "No message found";
        }
    }
}






let selectedFiles = []; // Array to store selected file names

// Function to handle individual checkbox selection
function handleCheckboxChange(checkbox) {
    const fileName = checkbox.getAttribute('data-file');
    
    if (checkbox.checked) {
        // Add to the list if checked and not already in the list
        if (!selectedFiles.includes(fileName)) {
            selectedFiles.push(fileName);
        }
    } else {
        // Remove from the list if unchecked
        selectedFiles = selectedFiles.filter(file => file !== fileName);
    }
    console.log(selectedFiles); // Log the selected files for verification
}

// Function to handle "Select All" checkbox
function selectAll(selectAllCheckbox) {
    const checkboxes = document.querySelectorAll('.file-checkbox');
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = selectAllCheckbox.checked; // Check/uncheck all
        handleCheckboxChange(checkbox); // Update the list accordingly
    });
}

// Event listener for individual checkboxes
document.querySelectorAll('.file-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
        handleCheckboxChange(this);
    });
});

// Event listener for the "Select All" checkbox
document.getElementById('select-all').addEventListener('change', function() {
    selectAll(this);
});







import com.sun.net.httpserver.HttpExchange;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class MaskerHandler {

    public void handle(HttpExchange exchange) throws IOException {
        if ("PUT".equals(exchange.getRequestMethod())) {
            InputStream inputStream = exchange.getRequestBody();
            String requestBody = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
            
            parseMessageFromJson(requestBody);

            // Sending response (optional)
            String response = "Data received";
            exchange.sendResponseHeaders(200, response.length());
            exchange.getResponseBody().write(response.getBytes());
            exchange.close();
        }
    }

    // Function to parse JSON without external libraries
    public static void parseMessageFromJson(String json) {
        String message = extractValue(json, "message");
        String selectedFiles = extractValue(json, "selectedFiles");

        System.out.println("Message: " + message);
        System.out.println("Selected Files: " + selectedFiles);
    }

    // Helper function to manually extract values from JSON-like strings
    public static String extractValue(String json, String key) {
        String searchKey = "\"" + key + "\":";
        int startIndex = json.indexOf(searchKey) + searchKey.length();
        if (startIndex == -1) return null;

        char delimiter = json.charAt(startIndex) == '[' ? ']' : '"'; // Handle array or string
        startIndex = json.indexOf(delimiter == ']' ? '[' : '"', startIndex) + 1;
        int endIndex = json.indexOf(delimiter, startIndex);

        return json.substring(startIndex, endIndex);
    }
}